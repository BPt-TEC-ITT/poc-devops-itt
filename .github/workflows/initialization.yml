name: POC initialization

on:
    workflow_dispatch:

env:
  ARM_CLIENT_SECRET: ${{  secrets.ARM_CLIENT_SECRET  }}
  ARM_SUBSCRIPTION_ID: ${{  secrets.ARM_SUBSCRIPTION_ID  }}
  ARM_TENANT_ID: ${{  secrets.ARM_TENANT_ID  }}
  ARM_CLIENT_ID: ${{  secrets.ARM_CLIENT_ID  }}

jobs:
  
  poc_initialization:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3
    
        - name: configure client secret
          run: export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
        
        - name: configure subscription id
          run: export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
        
        - name: configure tenant id
          run: export ARM_TENANT_ID=$ARM_TENANT_ID
    
        - name: configure client id
          run: export ARM_CLIENT_ID=$ARM_CLIENT_ID
    
        - name: Initialize Terraform
          working-directory: ./containerization/infrastructure/Initialization
          run: terraform init
    
        - name: terraform plan
          working-directory: ./containerization/infrastructure/Initialization
          run: terraform plan

        - name: terraform apply
          working-directory: ./containerization/infrastructure/Initialization
          run: terraform apply -auto-approve

        - name: terraform apply
          working-directory: ./containerization/infrastructure/Initialization
          run: terraform output mx >> conf.txt

        - name: cache registry token
          uses: actions/upload-artifact@v4
          with:
            name: conf
            path: ./containerization/infrastructure/Initialization/conf.txt
  
  # testvar:
  #   needs: poc_initialization
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: timeout
  #       run: sleep 30

  #     - name: download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: conf

  #     - name: display result
  #       run: docker login containerregistrypocitt.azurecr.io -u containerRegistryPocITT -p $(sed 's/\"//g' conf.txt)
      

  first_build_base_image:
    needs: poc_initialization
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: wait the creation of resources
        run: sleep 30

      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: conf

      - name: Login to azure container registry
        run: 
          docker login containerregistrypocitt.azurecr.io -u containerRegistryPocITT -p $(sed 's/\"//g' conf.txt)

      - name: Create env file
        working-directory: ./containerization/image-build
        env:
          MONGO_URI: ${{  secrets.MONGO_URI  }}
          HOST_URL: ${{  secrets.HOST_URL  }}
        run: |
          touch .env
          echo MONGO_URI=$MONGO_URI >> .env
          echo HOST_URL=$HOST_URL >> .env
      - name: build & add first app image to container our registry
        working-directory: ./containerization/image-build
        run: docker build . --tag containerRegistryPocITT/app-user:1.0
      - name: Push images
        run: docker push containerRegistryPocITT/app-user:1.0

  # deploy:
  #   needs: [poc_initialization, first_build_base_image]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses:  actions/checkout@v3
  #     - name: Initialize Terraform
  #       working-directory: ./containerization/infrastructure/deploy-container
  #       run: terraform init

  #     - name: Try terraform plan
  #       working-directory: ./containerization/infrastructure/deploy-container
  #       run: terraform plan -var application_version=1.0

  #     - name: Deployment on ALL env
  #       working-directory: ./containerization/infrastructure/deploy-container
  #       run: terraform apply -var application_version=1.0 